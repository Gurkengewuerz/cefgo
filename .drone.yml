kind: pipeline
type: docker
name: build-go-amd64

platform:
  os: linux
  arch: amd64

steps:
  - name: prepare
    image: techknowlogick/xgo:latest
    volumes:
      - name: cache
        path: /release
    commands:
      - export PATH=$PATH:$GOPATH/bin
      - export GO111MODULE=on
      - go env
      - "sed -i '157s/^[ \t]*//' /build.sh"
      - "sed -i '153,156d;158d' /build.sh"
      - go generate -mod=vendor ./...

  - name: build-win-64
    image: techknowlogick/xgo:latest
    volumes:
      - name: cache
        path: /release
    commands:
      - export PATH=$PATH:$GOPATH/bin
      - export GO111MODULE=on
      - "sed -i '157s/^[ \t]*//' /build.sh"
      - "sed -i '153,156d;158d' /build.sh"
      - ln -s /drone/src /source
      - rm -r include/* || true
      - cd Release/; find . -print | sed -e 's/^/"/g' -e 's/$/"/g' | grep -v "\".\"" | grep -v "\"./icon.png\"" | grep -v "\"./.gitkeep\"" | xargs rm -rf; cd .. || true
      - wget --no-verbose http://opensource.spotify.com/cefbuilds/cef_binary_83.3.11%2Bg1fac1e5%2Bchromium-83.0.4103.61_windows64_minimal.tar.bz2
      - tar -xjf *.tar.bz2
      - rm *.tar.bz2
      - mv cef_*/include/* include/
      - mv cef_*/Re*/* Release/
      - rm -r cef_*/
      - xgo -x -targets 'windows/amd64' -pkg 'examples/mainthread' -out cefgo .
      - xgo -x -targets 'windows/amd64' -pkg 'examples/subprocess' -out helper .
      - cp /build/* Release/
      - ls -lah Release/
      - cd Release/; zip -r /release/windows-amd64.zip *

  - name: build-linux-64
    image: techknowlogick/xgo:latest
    volumes:
      - name: cache
        path: /release
    commands:
      - export PATH=$PATH:$GOPATH/bin
      - export GO111MODULE=on
      - "sed -i '157s/^[ \t]*//' /build.sh"
      - "sed -i '153,156d;158d' /build.sh"
      - apt-get update && apt-get install -y libgbm-dev libxss-dev
      - ln -s /drone/src /source
      - rm -r include/* || true
      - cd Release/; find . -print | sed -e 's/^/"/g' -e 's/$/"/g' | grep -v "\".\"" | grep -v "\"./icon.png\"" | grep -v "\"./.gitkeep\"" | xargs rm -rf; cd .. || true
      - wget --no-verbose http://opensource.spotify.com/cefbuilds/cef_binary_83.3.11%2Bg1fac1e5%2Bchromium-83.0.4103.61_linux64_minimal.tar.bz2
      - tar -xjf *.tar.bz2
      - rm *.tar.bz2
      - mv cef_*/include/* include/
      - mv cef_*/Re*/* Release/
      - rm -r cef_*/
      - xgo -x -targets 'linux/amd64' -pkg 'examples/mainthread' -out cefgo .
      - xgo -x -targets 'linux/amd64' -pkg 'examples/subprocess' -out helper .
      - cp /build/* Release/
      - ls -lah Release/
      - cd Release/; zip -r /release/linux-amd64.zip *

  - name: build-linux-arm64
    image: techknowlogick/xgo:latest
    volumes:
      - name: cache
        path: /release
    commands:
      - export PATH=$PATH:$GOPATH/bin
      - export GO111MODULE=on
      - "sed -i '157s/^[ \t]*//' /build.sh"
      - "sed -i '153,156d;158d' /build.sh"
      - apt-get update
      - dpkg --add-architecture arm64
      - dpkg --print-foreign-architectures
      - sed -i "s/^deb http/deb [arch=$(dpkg --print-architecture)] http/" /etc/apt/sources.list
      - sed "s/CODENAME/$(sed 's/UBUNTU_CODENAME=//;t;d' /etc/os-release)/g" examples/arm64-ubuntu-sources >> /etc/apt/sources.list
      - cat /etc/apt/sources.list
      - apt-get update && apt-get install -y libgbm1:arm64 libxss1:arm64 libgtk2.0-0:arm64 libsm6:arm64 libnss3:arm64 libnspr4:arm64 libatk1.0-0:arm64 libatk-bridge2.0-0:arm64 libfontconfig1-dev:arm64 libxcomposite1:arm64 libxdamage1:arm64 libxfixes3:arm64 libglib2.0-dev:arm64 libxtst6:arm64 libxrandr2:arm64 libx11-xcb1:arm64 libxcb-dri3-0:arm64 libxcursor1:arm64 libxi6:arm64 libdbus-1-3:arm64 libasound2:arm64 libpangocairo-1.0-0:arm64 libpango-1.0-0:arm64 libcups2:arm64
      - ln -s /drone/src /source
      - rm -r include/* || true
      - cd Release/; find . -print | sed -e 's/^/"/g' -e 's/$/"/g' | grep -v "\".\"" | grep -v "\"./icon.png\"" | grep -v "\"./.gitkeep\"" | xargs rm -rf; cd .. || true
      - wget --no-verbose http://opensource.spotify.com/cefbuilds/cef_binary_83.3.11%2Bg1fac1e5%2Bchromium-83.0.4103.61_linuxarm64_minimal.tar.bz2
      - tar -xjf *.tar.bz2
      - rm *.tar.bz2
      - mv cef_*/include/* include/
      - mv cef_*/Re*/* Release/
      - rm -r cef_*/
      - xgo -x -targets 'linux/arm64' -pkg 'examples/mainthread' -out cefgo .
      - xgo -x -targets 'linux/arm64' -pkg 'examples/subprocess' -out helper .
      - cp /build/* Release/
      - ls -lah Release/
      - cd Release/; zip -r /release/linux-arm64.zip *

  - name: artifacts
    image: alpine:latest
    volumes:
      - name: cache
        path: /release
    commands:
      - cat /etc/issue
      - apk add --no-cache openssh-client ca-certificates sshpass
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - export REMOTE_PATH=/data/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/${DRONE_BRANCH}/$(date +'%Y%m%d-%H%M%S')-${DRONE_COMMIT_SHA:0:9}/
      - export SSHPASS=$${REMOTE_PASSWORD}
      - sshpass -e ssh $${REMOTE_USERNAME}@$${REMOTE_HOST} "mkdir -p $REMOTE_PATH"
      - "sshpass -e scp -r /release/* $${REMOTE_USERNAME}@$${REMOTE_HOST}:$REMOTE_PATH"
    environment:
      REMOTE_USERNAME:
        from_secret: remote_username
      REMOTE_PASSWORD:
        from_secret: remote_password
      REMOTE_HOST:
        from_secret: remote_host
    when:
      event:
        - push
        - tag

volumes:
  - name: cache
    temp: {}